{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","phrase","pageNum","handleOnMore","insults","nums","i","push","randomNum","Math","floor","random","length","randomInsult","_this","setState","prevState","request","concat","err","res","html","statusCode","$","cheerio","load","each","el","text","includes","replace","console","log","_this2","this","react_default","a","createElement","className","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qbAKqBA,6MACnBC,MAAQ,CACNC,OAAQ,GACRC,QAAS,KAEXC,aAAe,WAab,IAZA,IAAIC,EAAU,CACZ,kFACA,sEACA,6CACA,6CACA,6CACA,gEACA,0DACA,8HACA,6EAEEC,EAAO,GACFC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAKE,KAAKD,GAEZ,IAAIE,EAAYH,EAAKI,KAAKC,MAAMD,KAAKE,SAAWN,EAAKO,SACjDC,EAAeT,EAAQK,KAAKC,MAAMD,KAAKE,SAAWP,EAAQQ,SAC9DE,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAAEd,QAASM,KACvCS,IAAO,2DAAAC,OAEHJ,EAAKd,MAAME,SAEb,SAACiB,EAAKC,EAAKC,GACT,IAAKF,GAA0B,MAAnBC,EAAIE,WAAoB,CAClC,IAAMC,EAAIC,IAAQC,KAAKJ,GACvBE,EAAE,YAAYG,KAAK,SAACpB,EAAGqB,GACrB,IAAMC,EAAOL,EAAEI,GAAIC,OAEfA,EAAKC,SAAS,4BAChBf,EAAKC,SAAS,iBAAO,CACnBd,OAAQ2B,EAAKE,QAAQ,2BAAQjB,MAG/BC,EAAKX,oBAMf4B,QAAQC,IAAIlB,EAAKd,MAAME,6FAEL,IAAA+B,EAAAC,KACd9B,EAAU,CACZ,kFACA,sEACA,6CACA,6CACA,6CACA,gEACA,2DAEES,EAAeT,EAAQK,KAAKC,MAAMD,KAAKE,SAAWP,EAAQQ,SAE9DK,IAAO,2DAAAC,OADG,GAGR,SAACC,EAAKC,EAAKC,GACT,IAAKF,GAA0B,MAAnBC,EAAIE,WAAoB,CAClC,IAAMC,EAAIC,IAAQC,KAAKJ,GACvBE,EAAE,YAAYG,KAAK,SAACpB,EAAGqB,GACrB,IAAMC,EAAOL,EAAEI,GAAIC,OACfA,EAAKC,SAAS,4BAChBI,EAAKlB,SAAS,iBAAO,CACnBd,OAAQ2B,EAAKE,QAAQ,2BAAQjB,MAG/BoB,EAAKlB,SAAS,SAAAC,GAAS,MAAK,CAAEf,OAAQ,mIAQhD,OACEkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,SAAIH,KAAKlC,MAAMC,QACfkC,EAAAC,EAAAC,cAAA,UAAQE,GAAG,OAAOC,QAASN,KAAK/B,cAAhC,wDAnFuBsC,IAAMC,WCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ce449442.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport cheerio from \"cheerio\";\nimport request from \"request\";\n\nexport default class App extends React.Component {\n  state = {\n    phrase: \"\",\n    pageNum: 1\n  };\n  handleOnMore = () => {\n    let insults = [\n      \"اولاد الشرموطة\",\n      \"اولاد القحبة\",\n      \"المنايك\",\n      \"العرصات\",\n      \"الخولات\",\n      \"لعيبة التنس\",\n      \"كلاب ايران\",\n      \"اولاد النايمة على بطنها\",\n      \"سماح الشرموطة\"\n    ];\n    let nums = [];\n    for (let i = 1; i < 300; i++) {\n      nums.push(i);\n    }\n    let randomNum = nums[Math.floor(Math.random() * nums.length)];\n    let randomInsult = insults[Math.floor(Math.random() * insults.length)];\n    this.setState(prevState => ({ pageNum: randomNum }));\n    request(\n      `https://arabic.rt.com/listing/tag.hamas/noprepare/tag/1/${\n        this.state.pageNum\n      }`,\n      (err, res, html) => {\n        if (!err && res.statusCode === 200) {\n          const $ = cheerio.load(html);\n          $(\".heading\").each((i, el) => {\n            const text = $(el).text();\n\n            if (text.includes(\"حماس\")) {\n              this.setState(() => ({\n                phrase: text.replace(\"حماس\", randomInsult)\n              }));\n            } else {\n              this.handleOnMore();\n            }\n          });\n        }\n      }\n    );\n    console.log(this.state.pageNum);\n  };\n  componentDidMount() {\n    let insults = [\n      \"اولاد الشرموطة\",\n      \"اولاد القحبة\",\n      \"المنايك\",\n      \"العرصات\",\n      \"الخولات\",\n      \"لعيبة التنس\",\n      \"كلاب ايران\"\n    ];\n    let randomInsult = insults[Math.floor(Math.random() * insults.length)];\n    let num = 1;\n    request(\n      `https://arabic.rt.com/listing/tag.hamas/noprepare/tag/1/${num}`,\n      (err, res, html) => {\n        if (!err && res.statusCode === 200) {\n          const $ = cheerio.load(html);\n          $(\".heading\").each((i, el) => {\n            const text = $(el).text();\n            if (text.includes(\"حماس\")) {\n              this.setState(() => ({\n                phrase: text.replace(\"حماس\", randomInsult)\n              }));\n            } else {\n              this.setState(prevState => ({ phrase: \"عص عجوجل كمان مرة\" }));\n            }\n          });\n        }\n      }\n    );\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>{this.state.phrase}</p>\n          <button id=\"more\" onClick={this.handleOnMore}>\n            عص عجوجل\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}